name: Android Release

on:
  push:
    branches:
      - main

jobs:
  build-and-release:
    name: Build and Publish Debug Artifact
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Prepare Android toolchain
        uses: ./.github/actions/setup-android

      - name: Build debug artifact (retry up to 3 times)
        run: |
          attempts=0
          until [ "$attempts" -ge 3 ]; do
            if ./gradlew --no-daemon clean assembleDebug; then
              break
            fi
            attempts=$((attempts + 1))
            if [ "$attempts" -ge 3 ]; then
              echo "Gradle build failed after $attempts attempts"
              exit 1
            fi
            echo "Gradle build failed (attempt $attempts). Retrying in 20 seconds..."
            sleep 20
          done

      - name: Extract app version
        id: version
        run: |
          VERSION_NAME=$(sed -n 's/^[[:space:]]*versionName = "\(.*\)"/\1/p' app/build.gradle.kts | head -1)
          VERSION_CODE=$(sed -n 's/^[[:space:]]*versionCode = \([0-9]*\)/\1/p' app/build.gradle.kts | head -1)
          if [ -z "$VERSION_NAME" ]; then
            echo "Failed to determine versionName" >&2
            exit 1
          fi
          echo "version_name=$VERSION_NAME" >> "$GITHUB_OUTPUT"
          echo "version_code=${VERSION_CODE:-unknown}" >> "$GITHUB_OUTPUT"

      - name: Prepare release artifacts
        env:
          VERSION_NAME: ${{ steps.version.outputs.version_name }}
        run: |
          APK_PATH=app/build/outputs/apk/debug/app-debug.apk
          if [ ! -f "$APK_PATH" ]; then
            echo "Expected APK not found at $APK_PATH" >&2
            find app/build/outputs -maxdepth 3 -type f || true
            exit 1
          fi
          mkdir -p artifacts
          cp "$APK_PATH" "artifacts/AICoreChat-${VERSION_NAME}-debug.apk"

      - name: Publish GitHub release
        uses: ncipollo/release-action@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          tag: v${{ steps.version.outputs.version_name }}-debug-build-${{ github.run_number }}
          name: AICoreChat v${{ steps.version.outputs.version_name }} Debug (build ${{ github.run_number }})
          body: |
            ## Build Info
            - Version: v${{ steps.version.outputs.version_name }} (code ${{ steps.version.outputs.version_code }})
            - Commit: ${{ github.sha }}
            - Message: ${{ github.event.head_commit.message }}
            - Triggered by: ${{ github.actor }} on `${{ github.ref_name }}`

            _Debug build generated automatically via GitHub Actions run ${{ github.run_id }}._
          draft: false
          prerelease: false
          makeLatest: true
          artifacts: artifacts/AICoreChat-${{ steps.version.outputs.version_name }}-debug.apk
          artifactContentType: application/octet-stream
